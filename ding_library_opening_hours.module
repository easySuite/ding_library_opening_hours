<?php
/**
 * @file
 * Code for the Ding library opening hours related blocks.
 */

/**
 * Implements hook_menu().
 */
function ding_library_opening_hours_menu() {
  $menu = array();

  $menu['ding_library_hours_ajax/%/%'] = array(
    'title' => 'Ding library opening/today hours',
    'description' => 'Ajax representation of widget',
    'access arguments' => array('access content'),
    'page callback' => 'ding_library_opening_hours_ajax',
    'page arguments' => array(1, 2),
  );

  return $menu;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ding_library_opening_hours_form_ding_ddbasic_opening_hours_settings_form_alter(&$form, &$form_state, $form_id) {
  $form['dloh'] = array(
    '#type' => 'fieldset',
    '#title' => 'Ding library opening hours settings',
  );

  $form['dloh']['ding_library_opening_hours_notice_hide_icon'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show notice as text'),
    '#description' => t('Toggle display of notice in "Opened today" libraries block.'),
    '#default_value' => variable_get('ding_library_opening_hours_notice_hide_icon', ''),
  );

  $form['dloh']['ding_library_opening_hours_show_in_tabs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show opening hours in tabs?'),
    '#default_value' => variable_get('ding_library_opening_hours_show_in_tabs', 0),
  );
}

/**
 * Ajax handler.
 */
function ding_library_opening_hours_ajax($type, $id) {
  $theme = 'ding_library_' . $type . '_view';
  $commands = array();
  $commands[] = ajax_command_replace('#' . $id . ".ding_library_hours", theme($theme));

  return ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
}

/**
 * Implements hook_block_info().
 */
function ding_library_opening_hours_block_info() {
  return array(
    'ding_library_opening_hours' => array(
      'info' => t('Ding: Opening hours for this week'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'ding_library_opened_today' => array(
      'info' => t("Ding: Today's opening hours for all libraries"),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function ding_library_opening_hours_block_view($delta = '') {
  $block = array();

  drupal_add_js(drupal_get_path('module', 'ding_library_opening_hours') . '/js/ding_library_opening_hours.js');

  if ($delta == 'ding_library_opening_hours' && $node = menu_get_object()) {
    drupal_add_css(drupal_get_path('module', 'ding_library_opening_hours') . '/css/ding_library_opening_hours.css', array('type' => 'file'));
    $block['subject'] = t('Opening hours');
    $block['content'] = array(
      '#theme' => 'ding_library_opening_hours_view',
      '#node' => $node,
    );
  }

  if ($delta == 'ding_library_opened_today') {
    drupal_add_css(drupal_get_path('module', 'ding_library_opening_hours') . '/css/ding_library_opening_hours.css', array('type' => 'file'));
    $block['subject'] = t('Opened today');
    $block['content'] = array(
      '#theme' => 'ding_library_opened_today_view',
    );

    if (variable_get('ding_library_opening_hours_show_in_tabs', 0) == 1) {
      $block['content'] = array(
        '#theme' => 'ding_library_opening_hours_all_tabbed',
      );
    }
  }

  return $block;
}

/**
 * Implements hook_preprocess_theme().
 */
function ding_library_opening_hours_preprocess_opening_hours_week(&$vars) {
  $library = $vars['node'];
  $hide_from_overview = FALSE;

  if (isset($library->field_ding_library_overview_val[LANGUAGE_NONE][0]['value'])) {
    $hide_from_overview = $library->field_ding_library_overview_val[LANGUAGE_NONE][0]['value'];
  }

  $vars['ding_library_overview'] = $hide_from_overview;
}

/**
 * Implements hook_theme().
 */
function ding_library_opening_hours_theme($existing, $type, $theme, $path) {
  return array(
    'ding_library_opening_hours_view' => array(
      'path' => $path . '/templates',
      'template' => 'ding_library_opening_hours_view',
      'variables' => array('node' => NULL),
    ),
    'ding_library_opened_today_view' => array(
      'path' => $path . '/templates',
      'template' => 'ding_library_opened_today_view',
      'variables' => array('libraries' => NULL),
    ),
    'ding_library_opening_hours_all_tabbed' => array(
      'variables' => array(
        'today' => NULL,
      ),
    ),
  );
}

/**
 * Preprocess variables for our template.
 */
function template_preprocess_ding_library_opening_hours_view(&$vars) {
  $node = $vars['node'];
  // Some minor date manipulations to get the correct range for the block.
  $full_day            = 24 * 60 * 60;
  $current_date        = time();
  $current_day_of_week = date('w');
  $start_of_week       = $current_date - ($full_day * $current_day_of_week) + 1;
  $start_date          = date('Y-m-d', $start_of_week);

  // Generate dummy holder for the current week.
  $days = array();
  for ($i = 0; $i < 7; $i++) {
    $start_of_week  += $full_day;
    $day_date        = date('Y-m-d', $start_of_week);
    $days[$day_date] = array(
      'day_name' => date('l', $start_of_week),
    );
  }

  $end_date = date('Y-m-d', $start_of_week);

  // Load the opening hours from DB for theming.
  $opening_hours = opening_hours_instance_load_multiple($node->nid, $start_date, $end_date);
  foreach ($opening_hours as $instance) {
    if (isset($days[$instance->date]['day_name'])) {
      $days[$instance->date]['end_time'] = $instance->end_time;
      $days[$instance->date]['start_time'] = $instance->start_time;
    }
  }

  $vars['days'] = $days;
}

/**
 * Preprocess variables for our template.
 */
function template_preprocess_ding_library_opened_today_view(&$vars) {
  $libraries = array();
  $today = date('Y-m-d');

  // Load all libraries form list, because there are less libraries than dates
  // and because of how opening_hours_instance_load_multiple works.
  $sql = 'SELECT nq.qid, nq.show_in_tab, nq.show_in_links, nq.show_in_ui, nq.i18n ' .
    'FROM {nodequeue_queue} nq ' .
    'INNER JOIN {nodequeue_types} nt ON nt.qid = nq.qid ' .
    "WHERE nt.type = :type ";
  $result = db_query($sql, array(':type' => 'ding_library'));
  $qids = array();
  foreach ($result as $qid) {
    $qids[$qid->qid] = $qid;
  }
  $queue_id = array_keys($qids);
  $nodes = nodequeue_load_nodes($queue_id[0], FALSE, 0, 50);

  if (!empty($nodes)) {
    foreach ($nodes as $library) {
      $hide_from_main_widget = FALSE;
      if (isset($library->field_ding_library_main_val[LANGUAGE_NONE][0]['value'])) {
        $hide_from_main_widget = $library->field_ding_library_main_val[LANGUAGE_NONE][0]['value'];
      }

      if (!$hide_from_main_widget) {
        $libraries[$library->nid]['title'] = l(
          $library->title,
          'node/' . $library->nid,
          array('fragment' => 'toggle-opening-hours', 'external' => TRUE)
        );
      }
    }

    // Get all dates for today.
    if (!empty($libraries) > 0) {
      $opening_hours = opening_hours_instance_load_multiple(array_keys($libraries), $today, $today);
      $i = 0;
      foreach ($opening_hours as $hour) {
        $libraries[$hour->nid]['opening_hours'][$i]['start_time'] = $hour->start_time;
        $libraries[$hour->nid]['opening_hours'][$i]['end_time'] = $hour->end_time;
        $libraries[$hour->nid]['opening_hours'][$i]['notice'] = $hour->notice;
        $i++;
      }

      // Check if we should display text instead of "info" icon for notice.
      $notice_format = variable_get('ding_library_opening_hours_notice_hide_icon', FALSE);
      $vars['notice_format'] = $notice_format;
    }
  }

  $vars['libraries'] = $libraries;
}

/**
 * Implements hook_views_pre_render().
 */
function ding_library_opening_hours_views_pre_render(&$view) {
  if ($view->name == 'ding_library' && $view->current_display == 'ding_library_libraries_list') {
    foreach ($view->result as $row => $item) {
      $node = node_load($item->nid);
      $field = field_get_items('node', $node, 'field_ding_library_overview_val');
      $ding_library_overview = $field[0]['value'];

      if (!empty($ding_library_overview)) {
        unset($view->result[$row]);
      }
    }
  }
}


/**
 * Categorized library opening hours.
 */
function theme_ding_library_opening_hours_all_tabbed($variables) {
  return $variables['tabbed'];
}

/**
 * Preprocessing categorized library opening hours.
 */
function template_preprocess_ding_library_opening_hours_all_tabbed(&$variables) {
  drupal_add_library('system', 'ui.tabs');
  drupal_add_js('jQuery(document).ready(function(){jQuery("#oh-tabs").tabs();});', 'inline');

  $today = strtotime('today');

  if (!empty($variables['today'])) {
    $today = $variables['today'];
  }

  $order = [];
  $queue = nodequeue_load_queue_by_name('ding_library_listing');
  foreach (nodequeue_load_nodes($queue->qid, FALSE, 0, 0) as $node) {
    if (empty($node->field_ding_library_main_val[LANGUAGE_NONE][0]['value'])) {
      $order[$node->title] = $node->nid;
    }
  }

  // Get and sort all the instances in the given timespan.
  $instances = opening_hours_instance_load_multiple(
    array_values($order),
    date('Y-m-d', $today),
    date('Y-m-d', $today)
  );

  foreach ($order as $library_nid) {
    $closed = TRUE;
    foreach ($instances as $instance) {
      if ($instance->nid == $library_nid) {
        $closed = FALSE;
      }
    }

    if ($closed === TRUE) {
      $instances[] = (object) [
        'instance_id' => -1,
        'nid' => $library_nid,
        'start_time' => '0',
        'end_time' => '0',
        'category_tid' => NULL,
        'date' => date('Y-m-d', $today),
        'closed' => TRUE,
        'notice' => t('Closed'),
      ];
    }
  }

  usort($instances, 'ding_ddbasic_opening_hours_sort');

  $order = array_flip($order);

  foreach ($instances as $instance) {
    $category_weight = ding_ddbasic_opening_hours_get_category_weight($instance->category_tid);

    if (!isset($categories[$category_weight])) {
      $categories[$category_weight] = ding_ddbasic_opening_hours_get_category_name($instance->category_tid);

      // Forming tab heading names.
      foreach ($categories as $key => $category) {
        // Resetting default tab name.
        if ($key == '-1') {
          $category = t('Library and citizens');
        }
        $tabs_heading[$key] = "<a href='#tab-$key'>$category</a>";
      }
    }

    $library = $order[$instance->nid];

    if (!isset($structured[$library])) {
      $structured[$library] = [
        'cols' => [],
        'extra' => [],
        'name' => l($library, 'node/' . $instance->nid),
      ];
    }

    if (!empty($instance->notice)) {
      $notice = '<span class="opening-hours-table-notice">' . $instance->notice . '</span>';
    }
    else {
      $notice = '';
    }

    if (empty($structured[$library]['cols'][$category_weight])) {
      $structured[$library]['cols'][$category_weight] = '';
    }

    if (empty($instance->closed)) {
      $structured[$library]['cols'][$category_weight] .= '<div class="oh-info-item">' . $notice . '<span class="oh-period">' . t('@from - @to', [
          '@from' => $instance->start_time,
          '@to' => $instance->end_time,
        ]) . '</span></div>';
    }
    else {
      $structured[$library]['cols'][$category_weight] = $notice;
      // Passing 'closed' attribute in order to know that library is closed.
      $structured[$library]['extra']['closed'] = $category_weight;
    }

    $structured = array_merge(array_intersect_key(array_flip($order), $structured), $structured);
  }

  // Start rendering block with tabs.
  foreach ($tabs_heading as $k => $tab) {
    $div[$k] = [
      '#type' => 'container',
      '#attributes' => [
        'id' => 'tab-' . $k,
      ],
    ];

    // Rendering opening hours.
    foreach ($structured as $lib => $item) {
      $inlined = '';
      foreach ($item['cols'] as $i => $col) {
        // Display opening hours item for tab with related category.
        if ($i == $k) {
          $inlined .= $col;
        }
        // Show if library is closed.
        else {
          if (!empty($item['extra']['closed'])) {
            $inlined = $item['cols']['-1'];
          }
        }
      }

      // If library doesn't have opening hours - we hide this, otherwise show
      // info for this library.
      if (!empty($inlined)) {
        $div[$k][] = [
          $lib = [
            '#prefix' => '<div class="oh-item">',
            '#suffix' => '</div>',
            '#type' => 'markup',
            '#markup' => '<h3>' . $item['name'] . '</h3><div class="oh-info">' . $inlined . '</div>',
          ],
        ];
      }
    }
  }

  // Forming container for rendering.
  $content_block = [
    '#type' => 'container',
    '#attributes' => ['id' => 'oh-tabs'],
    'tabs' => [
      '#theme' => 'item_list',
      '#items' => $tabs_heading,
    ],
    'contents' => [
      '#type' => 'markup',
      '#markup' => drupal_render($div),
    ],
  ];

  // Return rendered block into pane.
  $variables['tabbed'] = drupal_render($content_block);
}
